{"version":3,"sources":["scripts/main.js"],"names":["rowsNum","columnsNum","field","startButton","document","querySelector","gameFieldTable","gameField","tBodies","gameScore","messageLose","messageWin","messageStart","winValue","maxTileValue","score","isListenerRemoved","touchX","touchY","filterZero","row","filter","tileValue","slide","isChecking","newRow","i","length","push","getColumn","columnNum","reduce","accum","updateColumn","newColumn","r","updateTile","updateRow","rowNum","c","slideUp","slideDown","reverse","slideLeft","slideRight","canMoveHorizontally","some","canMoveVertically","removeListeners","removeEventListener","handleSlide","handleFirstTouch","handleSlideWithSwipe","changeFieldAfterSlide","textContent","classList","remove","addTile","e","action","code","preventDefault","changedTouches","clientX","clientY","deltaX","deltaY","Math","abs","hasEmptyTile","tile","newValue","cell","rows","cells","add","isOnlyTwo","isAdded","floor","random","clearField","addEventListener","button","target","contains","replace"],"mappings":";AAAA,aAkSA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAhSA,IAAMA,EAAU,EACVC,EAAa,EAEbC,EAAQ,CACZ,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGNC,EAAcC,SAASC,cAAc,WACrCC,EAAiBF,SAASC,cAAc,eACxCE,EAAYD,EAAeE,QAAQ,GAEnCC,EAAYL,SAASC,cAAc,eACnCK,EAAcN,SAASC,cAAc,iBACrCM,EAAaP,SAASC,cAAc,gBACpCO,EAAeR,SAASC,cAAc,kBAEtCQ,EAAW,KACbC,EAAe,EACfC,EAAQ,EACRC,GAAoB,EACpBC,EAAS,EACTC,EAAS,EAEb,SAASC,EAAWC,GACXA,OAAAA,EAAIC,OAAO,SAAAC,GAAaA,OAAc,IAAdA,IAGjC,SAASC,EAAMH,GAGR,IAHaI,IAAAA,EAAa,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAC3BC,EAASN,EAAWC,GAEfM,EAAI,EAAGA,EAAID,EAAOE,OAAS,EAAGD,IACjCD,EAAOC,KAAOD,EAAOC,EAAI,KAC3BD,EAAOC,IAAM,EACbD,EAAOC,EAAI,GAAK,EAEXF,IACHT,GAASU,EAAOC,GAEhBZ,EAAeW,EAAOC,GAAKZ,EACvBW,EAAOC,GACPZ,IAOHW,IAFPA,EAASN,EAAWM,GAEbA,EAAOE,OAAS1B,GACrBwB,EAAOG,KAAK,GAGPH,OAAAA,EAGT,SAASI,EAAUC,GACV5B,OAAAA,EAAM6B,OAAO,SAACC,EAAOZ,GAGnBY,OAFPA,EAAMJ,KAAKR,EAAIU,IAERE,GACN,IAGL,SAASC,EAAaH,EAAWI,GAC1B,IAAA,IAAIC,EAAI,EAAGA,EAAInC,EAASmC,IAC3BjC,EAAMiC,GAAGL,GAAaI,EAAUC,GAEhCC,EAAWD,EAAGL,EAAWI,EAAUC,IAAM,IAI7C,SAASE,EAAUC,EAAQb,GACzBvB,EAAMoC,GAAUb,EAEX,IAAA,IAAIc,EAAI,EAAGA,EAAItC,EAAYsC,IAC9BH,EAAWE,EAAQC,EAAGd,EAAOc,IAAM,IAIvC,SAASC,IACF,IAAA,IAAID,EAAI,EAAGA,EAAItC,EAAYsC,IAAK,CAGnCN,EAAaM,EAFKhB,EAAMM,EAAUU,MAMtC,SAASE,IACF,IAAA,IAAIF,EAAI,EAAGA,EAAItC,EAAYsC,IAAK,CAGnCN,EAAaM,EAFKhB,EAAMM,EAAUU,GAAGG,WAAWA,YAMpD,SAASC,IACF,IAAA,IAAIR,EAAI,EAAGA,EAAInC,EAASmC,IAAK,CAGhCE,EAAUF,EAFKZ,EAAMrB,EAAMiC,MAM/B,SAASS,IACF,IAAA,IAAIT,EAAI,EAAGA,EAAInC,EAASmC,IAAK,CAGhCE,EAAUF,EAFKZ,EAAMrB,EAAMiC,GAAGO,WAAWA,YAM7C,SAASG,IACF,IAAA,IAAIV,EAAI,EAAGA,EAAInC,EAASmC,IAAK,CAG5BZ,GAAAA,EAFgBrB,EAAAA,EAAMiC,KAEP,GAAMW,KAAK,SAACxB,GAAcA,OAAc,IAAdA,IACpC,OAAA,EAIJ,OAAA,EAGT,SAASyB,IACF,IAAA,IAAIR,EAAI,EAAGA,EAAItC,EAAYsC,IAAK,CAG/BhB,GAAAA,EAFWM,EAAUU,IAEP,GAAMO,KAAK,SAACxB,GAAcA,OAAc,IAAdA,IACnC,OAAA,EAIJ,OAAA,EAGT,SAAS0B,IACP5C,SAAS6C,oBAAoB,QAASC,GACtC5C,EAAe2C,oBAAoB,aAAcE,GACjD7C,EAAe2C,oBAAoB,WAAYG,GAGjD,SAASC,IAGHvC,GAFJL,EAAU6C,YAAcvC,EAEpBD,IAAiBD,EAOnB,OANAF,EAAW4C,UAAUC,OAAO,UAE5BR,SAEAhC,GAAoB,GAKtByC,IAEKZ,KAA0BE,MAC7BrC,EAAY6C,UAAUC,OAAO,UAE7BR,IAEAhC,GAAoB,GAIxB,SAASkC,EAAYQ,GAGXC,OAFOD,EAAEE,MAGV,IAAA,UACHpB,IAEA,MAEG,IAAA,YACHC,IAEA,MAEG,IAAA,YACHE,IAEA,MAEG,IAAA,aACHC,IAEA,MAEF,QACE,OAGJS,IAGF,SAASF,EAAiBO,GACxBA,EAAEG,iBAEF5C,EAASyC,EAAEI,eAAe,GAAGC,QAC7B7C,EAASwC,EAAEI,eAAe,GAAGE,QAG/B,SAASZ,EAAqBM,GACtBO,IAAAA,EAASP,EAAEI,eAAe,GAAGC,QAAU9C,EACvCiD,EAASR,EAAEI,eAAe,GAAGE,QAAU9C,EAEzCiD,GAAAA,KAAKC,IAAIH,GAAUE,KAAKC,IAAIF,GAC1BD,EAAS,EACXtB,IAEAC,QAEG,CAAA,KAAIuB,KAAKC,IAAIH,GAAUE,KAAKC,IAAIF,IAOrC,OANIA,EAAS,EACX1B,IAEAC,IAMJY,IAGF,SAASgB,IACWnE,IADI,EACJA,EAAAA,EAAAA,GADI,IACG,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAdkB,IAAc,EACJA,EAAAA,EADI,EAAA,OAAA,IACC,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAClBkD,GAAS,IADS,EAAA,MAEb,OAAA,GAHY,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,MADH,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IASf,OAAA,EAGT,SAASlC,EAAWE,EAAQR,EAAWyC,GAC/BC,IAAAA,EAAOjE,EAAUkE,KAAKnC,GAAQoC,MAAM5C,GAE1C0C,EAAKjB,UAAUC,OAAsBgB,eAAAA,OAAAA,EAAKlB,cAC1CkB,EAAKlB,YAAciB,EAEfA,GACFC,EAAKjB,UAAUoB,IAAmBJ,eAAAA,OAAAA,IAItC,SAASd,IAAQmB,IAAAA,EAAY,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GACvB,GAACP,IAME,IAFHQ,IAAAA,GAAU,GAENA,GAAS,CACTvC,IAAAA,EAAS6B,KAAKW,MAAMX,KAAKY,SAAW/E,GACpC8B,EAAYqC,KAAKW,MAAMX,KAAKY,SAAW9E,GAEZ,IAA7BC,EAAMoC,GAAQR,KAChB5B,EAAMoC,GAAQR,GAAa8C,EACvB,EACAT,KAAKY,SAAW,GAAM,EAAI,EAE9B3C,EAAWE,EAAQR,EAAW5B,EAAMoC,GAAQR,IAE5C+C,GAAU,IAKhB,SAASG,IACPlE,EAAe,EACfC,EAAQ,EACRN,EAAU6C,YAAcvC,EAEnB,IAAA,IAAIoB,EAAI,EAAGA,EAAInC,EAASmC,IACtB,IAAA,IAAII,EAAI,EAAGA,EAAItC,EAAYsC,IAC9BrC,EAAMiC,GAAGI,GAAK,EAEdH,EAAWD,EAAGI,EAAG,IAKvBpC,EAAY8E,iBAAiB,QAAS,SAACvB,GAC/BwB,IAAAA,EAASxB,EAAEyB,OAEbD,EAAO3B,UAAU6B,SAAS,UAC5BF,EAAO5B,YAAc,UACrB4B,EAAO3B,UAAU8B,QAAQ,QAAS,WAElCzE,EAAa2C,UAAUoB,IAAI,WAClBO,EAAO3B,UAAU6B,SAAS,aACnCJ,IAEKhE,GACHgC,IAGGtC,EAAY6C,UAAU6B,SAAS,WAClC1E,EAAY6C,UAAUoB,IAAI,UAGvBhE,EAAW4C,UAAU6B,SAAS,WACjCzE,EAAW4C,UAAUoB,IAAI,WAI7BlB,GAAQ,GACRA,GAAQ,GAERrD,SAAS6E,iBAAiB,QAAS/B,GACnC5C,EAAe2E,iBAAiB,aAAc9B,GAC9C7C,EAAe2E,iBAAiB,WAAY7B","file":"main.2e895b23.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst rowsNum = 4;\nconst columnsNum = 4;\n\nconst field = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nconst startButton = document.querySelector('.button');\nconst gameFieldTable = document.querySelector('.game-field');\nconst gameField = gameFieldTable.tBodies[0];\n\nconst gameScore = document.querySelector('.game-score');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\n\nconst winValue = 2048;\nlet maxTileValue = 0;\nlet score = 0;\nlet isListenerRemoved = false;\nlet touchX = 0;\nlet touchY = 0;\n\nfunction filterZero(row) {\n  return row.filter(tileValue => tileValue !== 0);\n}\n\nfunction slide(row, isChecking = false) {\n  let newRow = filterZero(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n\n      if (!isChecking) {\n        score += newRow[i];\n\n        maxTileValue = newRow[i] > maxTileValue\n          ? newRow[i]\n          : maxTileValue;\n      }\n    }\n  }\n\n  newRow = filterZero(newRow);\n\n  while (newRow.length < columnsNum) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction getColumn(columnNum) {\n  return field.reduce((accum, row) => {\n    accum.push(row[columnNum]);\n\n    return accum;\n  }, []);\n}\n\nfunction updateColumn(columnNum, newColumn) {\n  for (let r = 0; r < rowsNum; r++) {\n    field[r][columnNum] = newColumn[r];\n\n    updateTile(r, columnNum, newColumn[r] || '');\n  }\n}\n\nfunction updateRow(rowNum, newRow) {\n  field[rowNum] = newRow;\n\n  for (let c = 0; c < columnsNum; c++) {\n    updateTile(rowNum, c, newRow[c] || '');\n  }\n}\n\nfunction slideUp() {\n  for (let c = 0; c < columnsNum; c++) {\n    const newColumn = slide(getColumn(c));\n\n    updateColumn(c, newColumn);\n  }\n}\n\nfunction slideDown() {\n  for (let c = 0; c < columnsNum; c++) {\n    const newColumn = slide(getColumn(c).reverse()).reverse();\n\n    updateColumn(c, newColumn);\n  }\n}\n\nfunction slideLeft() {\n  for (let r = 0; r < rowsNum; r++) {\n    const newRow = slide(field[r]);\n\n    updateRow(r, newRow);\n  }\n}\n\nfunction slideRight() {\n  for (let r = 0; r < rowsNum; r++) {\n    const newRow = slide(field[r].reverse()).reverse();\n\n    updateRow(r, newRow);\n  }\n}\n\nfunction canMoveHorizontally() {\n  for (let r = 0; r < rowsNum; r++) {\n    const rowCopy = [...field[r]];\n\n    if (slide(rowCopy, true).some((tileValue) => tileValue === 0)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction canMoveVertically() {\n  for (let c = 0; c < columnsNum; c++) {\n    const column = getColumn(c);\n\n    if (slide(column, true).some((tileValue) => tileValue === 0)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction removeListeners() {\n  document.removeEventListener('keyup', handleSlide);\n  gameFieldTable.removeEventListener('touchstart', handleFirstTouch);\n  gameFieldTable.removeEventListener('touchend', handleSlideWithSwipe);\n}\n\nfunction changeFieldAfterSlide() {\n  gameScore.textContent = score;\n\n  if (maxTileValue === winValue) {\n    messageWin.classList.remove('hidden');\n\n    removeListeners();\n\n    isListenerRemoved = true;\n\n    return;\n  }\n\n  addTile();\n\n  if (!canMoveHorizontally() && !canMoveVertically()) {\n    messageLose.classList.remove('hidden');\n\n    removeListeners();\n\n    isListenerRemoved = true;\n  }\n}\n\nfunction handleSlide(e) {\n  const action = e.code;\n\n  switch (action) {\n    case 'ArrowUp':\n      slideUp();\n\n      break;\n\n    case 'ArrowDown':\n      slideDown();\n\n      break;\n\n    case 'ArrowLeft':\n      slideLeft();\n\n      break;\n\n    case 'ArrowRight':\n      slideRight();\n\n      break;\n\n    default:\n      return;\n  }\n\n  changeFieldAfterSlide();\n}\n\nfunction handleFirstTouch(e) {\n  e.preventDefault();\n\n  touchX = e.changedTouches[0].clientX;\n  touchY = e.changedTouches[0].clientY;\n}\n\nfunction handleSlideWithSwipe(e) {\n  const deltaX = e.changedTouches[0].clientX - touchX;\n  const deltaY = e.changedTouches[0].clientY - touchY;\n\n  if (Math.abs(deltaX) > Math.abs(deltaY)) {\n    if (deltaX < 0) {\n      slideLeft();\n    } else {\n      slideRight();\n    }\n  } else if (Math.abs(deltaX) < Math.abs(deltaY)) {\n    if (deltaY < 0) {\n      slideUp();\n    } else {\n      slideDown();\n    }\n  } else {\n    return;\n  }\n\n  changeFieldAfterSlide();\n}\n\nfunction hasEmptyTile() {\n  for (const row of field) {\n    for (const tile of row) {\n      if (tile === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction updateTile(rowNum, columnNum, newValue) {\n  const cell = gameField.rows[rowNum].cells[columnNum];\n\n  cell.classList.remove(`field-cell--${cell.textContent}`);\n  cell.textContent = newValue;\n\n  if (newValue) {\n    cell.classList.add(`field-cell--${newValue}`);\n  }\n}\n\nfunction addTile(isOnlyTwo = false) {\n  if (!hasEmptyTile()) {\n    return;\n  }\n\n  let isAdded = false;\n\n  while (!isAdded) {\n    const rowNum = Math.floor(Math.random() * rowsNum);\n    const columnNum = Math.floor(Math.random() * columnsNum);\n\n    if (field[rowNum][columnNum] === 0) {\n      field[rowNum][columnNum] = isOnlyTwo\n        ? 2\n        : Math.random() > 0.9 ? 4 : 2;\n\n      updateTile(rowNum, columnNum, field[rowNum][columnNum]);\n\n      isAdded = true;\n    }\n  }\n}\n\nfunction clearField() {\n  maxTileValue = 0;\n  score = 0;\n  gameScore.textContent = score;\n\n  for (let r = 0; r < rowsNum; r++) {\n    for (let c = 0; c < columnsNum; c++) {\n      field[r][c] = 0;\n\n      updateTile(r, c, '');\n    }\n  }\n}\n\nstartButton.addEventListener('click', (e) => {\n  const button = e.target;\n\n  if (button.classList.contains('start')) {\n    button.textContent = 'Restart';\n    button.classList.replace('start', 'restart');\n\n    messageStart.classList.add('hidden');\n  } else if (button.classList.contains('restart')) {\n    clearField();\n\n    if (!isListenerRemoved) {\n      removeListeners();\n    }\n\n    if (!messageLose.classList.contains('hidden')) {\n      messageLose.classList.add('hidden');\n    }\n\n    if (!messageWin.classList.contains('hidden')) {\n      messageWin.classList.add('hidden');\n    }\n  }\n\n  addTile(true);\n  addTile(true);\n\n  document.addEventListener('keyup', handleSlide);\n  gameFieldTable.addEventListener('touchstart', handleFirstTouch);\n  gameFieldTable.addEventListener('touchend', handleSlideWithSwipe);\n});\n"]}